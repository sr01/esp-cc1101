esphome:
  name: esp-cc1101
  friendly_name: esp-cc1101
  includes:
    - cc1101.h
  libraries:
    - SPI
    - "SmartRC-CC1101-Driver-Lib"

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:

api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: true
  power_save_mode: HIGH

  ap:
    ssid: "Esp-Cc1101 Fallback Hotspot"
    password: !secret ap_password

captive_portal:

web_server:

globals:
  - id: lfan_warm_output_state
    type: float
    initial_value: '0.0'
    restore_value: yes
  - id: lfan_cold_output_state
    type: float
    initial_value: '0.0'
    restore_value: yes
  - id: rfan_warm_output_state
    type: float
    initial_value: '0.0'
    restore_value: yes
  - id: rfan_cold_output_state
    type: float
    initial_value: '0.0'
    restore_value: yes

############## RF ##############

sensor:
  - platform: custom
    lambda: |-
      auto my_sensor = new CC1101(
        18, // SCK
        19, // MISO
        23, // MOSI
        5, // CSN
        32, // GDO0
        200, // bandwidth_in_khz
        433.92, // freq_in_mhz
        id(transmitter) // id of remote_transmitter
      );
      App.register_component(my_sensor);
      return {my_sensor};
    sensors:
      id: transciver
      internal: true

remote_transmitter:
  - id: transmitter
    pin:
      number: 32 # This is GDO0
      allow_other_uses: true
    carrier_duty_percent: 100%

remote_receiver:
  - id: receiver
    pin:
      number: 32 # This is GDO0
      allow_other_uses: true
    tolerance: 50%

binary_sensor:

  ###### Right Fan Sensors  ######

  - platform: remote_receiver
    name: RFAN Fan Off Sensor
    raw:
      code: !include codes/rfan/fan_off.yaml
    on_release:
      then:
        - fan.turn_off: rfan_fan

  - platform: remote_receiver
    name: RFAN Light Off Sensor
    raw:
      code: !include codes/rfan/light_off.yaml

  - platform: remote_receiver
    name: RFAN Fan 1 Sensor
    raw:
      code: !include codes/rfan/fan_1.yaml
    on_release:
      then:
        - lambda: |-
            id(rfan_fan).turn_on().set_speed(1).perform();

  - platform: remote_receiver
    name: RFAN Fan 2 Sensor
    raw:
      code: !include codes/rfan/fan_2.yaml
    on_release:
      then:
        - lambda: |-
            id(rfan_fan).turn_on().set_speed(2).perform();

  - platform: remote_receiver
    name: RFAN Fan 3 Sensor
    raw:
      code: !include codes/rfan/fan_3.yaml
    on_release:
      then:
        - lambda: |-
            id(rfan_fan).turn_on().set_speed(3).perform();

  - platform: remote_receiver
    name: RFAN Fan 4 Sensor
    raw:
      code: !include codes/rfan/fan_4.yaml
    on_release:
      then:
        - lambda: |-
            id(rfan_fan).turn_on().set_speed(4).perform();

  - platform: remote_receiver
    name: RFAN Fan 5 Sensor
    raw:
      code: !include codes/rfan/fan_5.yaml
    on_release:
      then:
        - lambda: |-
            id(rfan_fan).turn_on().set_speed(5).perform();

  - platform: remote_receiver
    name: RFAN Light Neutral Sensor
    raw:
      code: !include codes/rfan/light_neutral.yaml

  - platform: remote_receiver
    name: RFAN Light Warm Sensor
    raw:
      code: !include codes/rfan/light_warm.yaml

  - platform: remote_receiver
    name: RFAN Light Cold Sensor
    raw:
      code: !include codes/rfan/light_cold.yaml

###### Left Fan Sensors   ######

  - platform: remote_receiver
    name: LFAN Fan Off Sensor
    raw:
      code: !include codes/lfan/fan_off.yaml
    on_release:
      then:
        - fan.turn_off: lfan_fan

  - platform: remote_receiver
    name: LFAN Light Off Sensor
    raw:
      code: !include codes/lfan/light_off.yaml

  - platform: remote_receiver
    name: LFAN Fan 1 Sensor
    raw:
      code: !include codes/lfan/fan_1.yaml
    on_release:
      then:
        - lambda: |-
            id(lfan_fan).turn_on().set_speed(1).perform();

  - platform: remote_receiver
    name: LFAN Fan 2 Sensor
    raw:
      code: !include codes/lfan/fan_2.yaml
    on_release:
      then:
        - lambda: |-
            id(lfan_fan).turn_on().set_speed(2).perform();

  - platform: remote_receiver
    name: LFAN Fan 3 Sensor
    raw:
      code: !include codes/lfan/fan_3.yaml
    on_release:
      then:
        - lambda: |-
            id(lfan_fan).turn_on().set_speed(3).perform();

  - platform: remote_receiver
    name: LFAN Fan 4 Sensor
    raw:
      code: !include codes/lfan/fan_4.yaml
    on_release:
      then:
        - lambda: |-
            id(lfan_fan).turn_on().set_speed(4).perform();

  - platform: remote_receiver
    name: LFAN Fan 5 Sensor
    raw:
      code: !include codes/lfan/fan_5.yaml
    on_release:
      then:
        - lambda: |-
            id(lfan_fan).turn_on().set_speed(5).perform();

  - platform: remote_receiver
    name: LFAN Light Neutral Sensor
    raw:
      code: !include codes/lfan/light_neutral.yaml

  - platform: remote_receiver
    name: LFAN Light Warm Sensor
    raw:
      code: !include codes/lfan/light_warm.yaml

  - platform: remote_receiver
    name: LFAN Light Cold Sensor
    raw:
      code: !include codes/lfan/light_cold.yaml

script:

  ###### Right Fan Scripts ######

  - id: rfan_fan_off
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/rfan/fan_off.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: rfan_light_off
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/rfan/light_off.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: rfan_fan_1
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/rfan/fan_1.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: rfan_fan_2
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/rfan/fan_2.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: rfan_fan_3
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/rfan/fan_3.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: rfan_fan_4
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/rfan/fan_4.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: rfan_fan_5
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/rfan/fan_5.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: rfan_light_neutral
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/rfan/light_neutral.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: rfan_light_warm
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/rfan/light_warm.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: rfan_light_cold
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/rfan/light_cold.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: rfan_wind
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/rfan/wind.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: rfan_direction
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/rfan/direction.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: rfan_1h
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/rfan/timer_1h.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: rfan_4h
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/rfan/timer_4h.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: rfan_8h
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/rfan/timer_8h.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: rfan_led_decrease
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/rfan/led_decrease.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: rfan_led_increase
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/rfan/led_increase.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  ###### Left Fan Scripts  ######

  - id: lfan_fan_off
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/lfan/fan_off.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: lfan_light_off
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/lfan/light_off.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: lfan_fan_1
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/lfan/fan_1.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: lfan_fan_2
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/lfan/fan_2.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: lfan_fan_3
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/lfan/fan_3.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: lfan_fan_4
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/lfan/fan_4.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: lfan_fan_5
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/lfan/fan_5.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: lfan_light_neutral
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/lfan/light_neutral.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: lfan_light_warm
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/lfan/light_warm.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: lfan_light_cold
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/lfan/light_cold.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: lfan_wind
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/lfan/wind.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: lfan_direction
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/lfan/direction.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: lfan_1h
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/lfan/timer_1h.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: lfan_4h
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/lfan/timer_4h.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: lfan_8h
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/lfan/timer_8h.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: lfan_led_decrease
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/lfan/led_decrease.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  - id: lfan_led_increase
    then:
      - lambda: get_cc1101(transciver).beginTransmission();
      - remote_transmitter.transmit_raw:
          code: !include codes/lfan/led_increase.yaml
      - lambda: get_cc1101(transciver).endTransmission();

  ###### Light Scripts
  - id: lfan_decide_light_mode
    mode: queued
    then:
      - lambda: |-
          float warm_threshold_high = 0.8f;
          float cold_threshold_low = 0.5f;
          float cold_threshold_high = 0.8f;
          float warm_threshold_low = 0.5f;
          
          if(id(lfan_warm_output_state) == 0 && id(lfan_cold_output_state) == 0){
            id(lfan_light_off).execute();
          } else if (id(lfan_warm_output_state) > warm_threshold_high && id(lfan_cold_output_state) < cold_threshold_low) {
            id(lfan_light_warm).execute();
          } else if (id(lfan_warm_output_state) < warm_threshold_low && id(lfan_cold_output_state) > cold_threshold_high) {
            id(lfan_light_cold).execute();
          } else {
            id(lfan_light_neutral).execute();
          }

  - id: rfan_decide_light_mode
    mode: queued
    then:
      - lambda: |-
          float warm_threshold_high = 0.8f;
          float cold_threshold_low = 0.5f;
          float cold_threshold_high = 0.8f;
          float warm_threshold_low = 0.5f;
          
          if(id(rfan_warm_output_state) == 0 && id(rfan_cold_output_state) == 0){
            id(rfan_light_off).execute();
          } else if (id(rfan_warm_output_state) > warm_threshold_high && id(rfan_cold_output_state) < cold_threshold_low) {
            id(rfan_light_warm).execute();
          } else if (id(rfan_warm_output_state) < warm_threshold_low && id(rfan_cold_output_state) > cold_threshold_high) {
            id(rfan_light_cold).execute();
          } else {
            id(rfan_light_neutral).execute();
          }

button:

  ######## Right Fan Buttons ########

  - platform: template
    id: rfan_light_off_button
    name: RFAN Light Off Button
    on_press:
      - script.execute: rfan_light_off

  - platform: template
    id: rfan_light_neutral_button
    name: RFAN Light Neutral Button
    on_press:
      - script.execute: rfan_light_neutral

  - platform: template
    id: rfan_light_warm_button
    name: RFAN Light Warm Button
    on_press:
      - script.execute: rfan_light_warm

  - platform: template
    id: rfan_light_cold_button
    name: RFAN Light Cold Button
    on_press:
      - script.execute: rfan_light_cold

  - platform: template
    id: rfan_wind_button
    name: RFAN Wind Button
    on_press:
      - script.execute: rfan_wind

  - platform: template
    id: rfan_direction_button
    name: RFAN F/R Button
    on_press:
      - script.execute: rfan_direction

  - platform: template
    id: rfan_1h_button
    name: RFAN 1H Button
    on_press:
      - script.execute: rfan_1h

  - platform: template
    id: rfan_4h_button
    name: RFAN 4H Button
    on_press:
      - script.execute: rfan_4h

  - platform: template
    id: rfan_8h_button
    name: RFAN 8H Button
    on_press:
      - script.execute: rfan_8h

  - platform: template
    id: rfan_led_decrease_button
    name: RFAN LED- Button
    on_press:
      - script.execute: rfan_led_decrease

  - platform: template
    id: rfan_led_increase_button
    name: RFAN LED+ Button
    on_press:
      - script.execute: rfan_led_increase

  ######## Left Fan Buttons ########

  - platform: template
    name: LFAN Light Off Button
    on_press:
      - script.execute: lfan_light_off

  - platform: template
    name: LFAN Light Neutral Button
    on_press:
      - script.execute: lfan_light_neutral

  - platform: template
    name: LFAN Light Warm Button
    on_press:
      - script.execute: lfan_light_warm

  - platform: template
    name: LFAN Light Cold Button
    on_press:
      - script.execute: lfan_light_cold

  - platform: template
    name: LFAN Wind Button
    on_press:
      - script.execute: lfan_wind

  - platform: template
    name: LFAN F/R Button
    on_press:
      - script.execute: lfan_direction

  - platform: template
    name: LFAN 1H Button
    on_press:
      - script.execute: lfan_1h

  - platform: template
    name: LFAN 4H Button
    on_press:
      - script.execute: lfan_4h

  - platform: template
    name: LFAN 8H Button
    on_press:
      - script.execute: lfan_8h

  - platform: template
    name: LFAN LED- Button
    on_press:
      - script.execute: lfan_led_decrease

  - platform: template
    name: LFAN LED+ Button
    on_press:
      - script.execute: lfan_led_increase

fan:

  ########## Left Fan ###############

  - platform: template
    id: lfan_fan
    name: "Left Fan"
    speed_count: 5
    on_state:
      - logger.log:
          format: "Left Fan State changed, state: %d, speed: %d"
          args: [ x->state, x->speed ]
      - lambda: |-
          if (x->state == 0){
            id(lfan_fan_off).execute();
          } else {
            if (x->speed == 1) { 
              id(lfan_fan_1).execute();
            } else if (x->speed == 2) {  
              id(lfan_fan_2).execute();
            } else if (x->speed == 3) {  
              id(lfan_fan_3).execute();
            } else if (x->speed == 4) { 
              id(lfan_fan_4).execute();
            } else if (x->speed == 5) { 
              id(lfan_fan_5).execute();
            }
          }

  ########## Right Fan ###############

  - platform: template
    id: rfan_fan
    name: "Right Fan"
    speed_count: 5
    on_state:
      - logger.log:
          format: "Right Fan State changed,  state: %d, speed: %d"
          args: [ x->state, x->speed ]
      - lambda: |-
          if (x->state == 0){
            id(rfan_fan_off).execute();
          } else {
            if (x->speed == 1) { 
              id(rfan_fan_1).execute();
            } else if (x->speed == 2) {  
              id(rfan_fan_2).execute();
            } else if (x->speed == 3) {  
              id(rfan_fan_3).execute();
            } else if (x->speed == 4) { 
              id(rfan_fan_4).execute();
            } else if (x->speed == 5) { 
              id(rfan_fan_5).execute();
            }
          }

output:
  - platform: template
    id: lfan_light_cold_output
    type: float
    write_action:
      - lambda: |-
          id(lfan_cold_output_state) = state;
          id(lfan_decide_light_mode).execute();
          ESP_LOGD("lfan", "lfan light cold output: %.2f", state);


  - platform: template
    id: lfan_light_warm_output
    type: float
    write_action:
      - lambda: |-
          id(lfan_warm_output_state) = state;
          id(lfan_decide_light_mode).execute();
          ESP_LOGD("lfan", "lfan light warm output: %.2f", state);

  - platform: template
    id: rfan_light_cold_output
    type: float
    write_action:
      - lambda: |-
          id(rfan_cold_output_state) = state;
          id(rfan_decide_light_mode).execute();
          ESP_LOGD("rfan", "rfan light cold output: %.2f", state);


  - platform: template
    id: rfan_light_warm_output
    type: float
    write_action:
      - lambda: |-
          id(rfan_warm_output_state) = state;
          id(rfan_decide_light_mode).execute();
          ESP_LOGD("rfan", "rfan light warm output: %.2f", state);

light:
  - platform: cwww
    name: "Left Light"
    cold_white: lfan_light_cold_output
    warm_white: lfan_light_warm_output
    cold_white_color_temperature: 6000 K
    warm_white_color_temperature: 3000 K
    constant_brightness: false
    default_transition_length: 0s
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: cwww
    name: "Right Light"
    cold_white: rfan_light_cold_output
    warm_white: rfan_light_warm_output
    cold_white_color_temperature: 6000 K
    warm_white_color_temperature: 3000 K
    constant_brightness: false
    default_transition_length: 0s
    restore_mode: RESTORE_DEFAULT_OFF

  # TODO:
  # - add brightness level (increase/decrease),
  # - decide about the  wind, direction, timers buttons - keep as buttons it or expose differently?
